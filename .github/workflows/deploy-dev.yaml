name: "[DEV] Deploy to EC2 Instance"

# Deploy either when a push is made to the dev branch or when a PR is labeled with 'dev-deploy'
on:
  push:
    branches:
      - dev
  pull_request:
    types: [labeled]

jobs:
  dev-deploy-to-ec2:
    if: >
      github.event_name == 'push' ||
      (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'dev-deploy'))
    environment: dev
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          printf '%s\n' "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Create SSH config for DEV
        run: |
          cat <<EOF >> ~/.ssh/config
          Host bastion
            HostName "${{ secrets.DEV_BASTION_HOST }}"
            User ec2-user
            IdentityFile ~/.ssh/id_rsa

          Host target
            HostName "${{ secrets.DEV_TARGET_HOST }}"
            User ec2-user
            IdentityFile ~/.ssh/id_rsa
            ProxyJump bastion
          EOF

      - name: Preload known hosts for bastion
        run: ssh-keyscan -H "${{ secrets.DEV_BASTION_HOST }}" >> ~/.ssh/known_hosts

      - name: Debug DEV_TARGET_HOST via Bastion
        run: |
          ssh -vvv -o StrictHostKeyChecking=no ec2-user@"${{ secrets.DEV_BASTION_HOST }}" "ssh -vvv -o StrictHostKeyChecking=no ec2-user@${{ secrets.DEV_TARGET_HOST }} 'echo \"Connected to target\"'"


      - name: Validate DEV_TARGET_HOST via bastion
        run: |
          echo "Validating connection to DEV_TARGET_HOST via bastion..."
          ssh -o StrictHostKeyChecking=no ec2-user@"${{ secrets.DEV_BASTION_HOST }}" "ssh-keyscan -T 5 -H 'ip-172-31-36-135.us-east-2.compute.internal'" || { echo "DEV_TARGET_HOST not reachable"; exit 1; }

      - name: Preload target host key via bastion
        run: ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.DEV_BASTION_HOST }} "ssh-keyscan -H '${{ secrets.DEV_TARGET_HOST }}'" >> ~/.ssh/known_hosts

      - name: Check if Docker rebuild is needed
        id: check_changes
        run: |
          CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          echo "Changed files:"
          echo "$CHANGED"
          if echo "$CHANGED" | grep -qE '(Dockerfile|docker-compose.yml)'; then
            echo "rebuild=true" >> $GITHUB_OUTPUT
          else
            echo "rebuild=false" >> $GITHUB_OUTPUT
          fi

      - name: Update .env file on target host
        run: |
          ssh target "printf '%b' \"${{ secrets.DEV_ENV }}\" > chesscom-helper/.env"

      - name: SSH into target host, git pull, and deploy
        run: |
          ssh target "cd chesscom-helper && bash ./deploy_scripts/deploy.sh ${{ steps.check_changes.outputs.rebuild }}"
