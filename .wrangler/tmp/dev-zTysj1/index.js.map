{
  "version": 3,
  "sources": ["../bundle-HzOvqj/checked-fetch.js", "../bundle-HzOvqj/strip-cf-connecting-ip-header.js", "wrangler-modules-watch:wrangler:modules-watch", "../../../node_modules/wrangler/templates/modules-watch-stub.js", "../../../node_modules/src/src/IttyRouter.ts", "../../../node_modules/src/src/Router.ts", "../../../node_modules/src/src/createResponse.ts", "../../../node_modules/src/src/json.ts", "../../../node_modules/src/src/error.ts", "../../../node_modules/src/src/withParams.ts", "../../../node_modules/src/src/AutoRouter.ts", "../../../node_modules/src/src/StatusError.ts", "../../../node_modules/src/src/status.ts", "../../../node_modules/src/src/text.ts", "../../../node_modules/src/src/html.ts", "../../../node_modules/src/src/jpeg.ts", "../../../node_modules/src/src/png.ts", "../../../node_modules/src/src/webp.ts", "../../../node_modules/src/src/withContent.ts", "../../../node_modules/src/src/withCookies.ts", "../../../node_modules/src/src/cors.ts", "../../../src/utils/crypto.ts", "../../../src/middleware/errorHandler.ts", "../../../src/services/userService.ts", "../../../src/services/subscriptionService.ts", "../../../src/services/chessComService.ts", "../../../src/services/monitoringService.ts", "../../../src/services/emailService.ts", "../../../src/services/notificationService.ts", "../../../src/jobs/playerMonitoring.ts", "../../../src/jobs/cleanup.ts", "../bundle-HzOvqj/middleware-loader.entry.ts", "../bundle-HzOvqj/middleware-insertion-facade.js", "../../../src/index.ts", "../../../src/routes/auth.ts", "../../../src/utils/jwt.ts", "../../../src/utils/validation.ts", "../../../src/routes/users.ts", "../../../src/services/preferencesService.ts", "../../../src/routes/monitoring.ts", "../../../src/routes/notifications.ts", "../../../src/middleware/auth.ts", "../../../src/middleware/validation.ts", "../../../src/middleware/rateLimit.ts", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../../../node_modules/wrangler/templates/middleware/common.ts"],
  "sourceRoot": "/Users/emilycogsdill/Documents/GitHub/chesscom-helper/worktrees/development/.wrangler/tmp/dev-zTysj1",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "function stripCfConnectingIPHeader(input, init) {\n\tconst request = new Request(input, init);\n\trequest.headers.delete(\"CF-Connecting-IP\");\n\treturn request;\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\treturn Reflect.apply(target, thisArg, [\n\t\t\tstripCfConnectingIPHeader.apply(null, argArray),\n\t\t]);\n\t},\n});\n", "", "// `esbuild` doesn't support returning `watch*` options from `onStart()`\n// plugin callbacks. Instead, we define an empty virtual module that is\n// imported by this injected file. Importing the module registers watchers.\nimport \"wrangler:modules-watch\";\n", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "export async function hashPassword(password: string): Promise<string> {\n  const encoder = new TextEncoder()\n  const data = encoder.encode(password)\n  const hashBuffer = await crypto.subtle.digest('SHA-256', data)\n  const hashArray = Array.from(new Uint8Array(hashBuffer))\n  return hashArray.map(b => b.toString(16).padStart(2, '0')).join('')\n}\n\nexport async function verifyPassword(password: string, hash: string): Promise<boolean> {\n  const computedHash = await hashPassword(password)\n  return computedHash === hash\n}\n\nexport async function generateSalt(): Promise<string> {\n  const array = new Uint8Array(16)\n  crypto.getRandomValues(array)\n  return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('')\n}\n\nexport async function hashPasswordWithSalt(password: string, salt: string): Promise<string> {\n  const encoder = new TextEncoder()\n  const data = encoder.encode(password + salt)\n  const hashBuffer = await crypto.subtle.digest('SHA-256', data)\n  const hashArray = Array.from(new Uint8Array(hashBuffer))\n  return hashArray.map(b => b.toString(16).padStart(2, '0')).join('')\n}\n\nexport async function generateSecureId(): Promise<string> {\n  const array = new Uint8Array(16)\n  crypto.getRandomValues(array)\n  return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('')\n}", "import { json } from 'itty-router'\n\nexport interface ApiError extends Error {\n  status?: number\n  code?: string\n  details?: unknown\n}\n\nexport function errorHandler(error: ApiError): Response {\n  console.error('API Error:', {\n    message: error.message,\n    status: error.status,\n    code: error.code,\n    stack: error.stack,\n    details: error.details\n  })\n\n  const status = error.status || 500\n  const code = error.code || 'INTERNAL_SERVER_ERROR'\n  \n  let message = error.message || 'An unexpected error occurred'\n  \n  if (status === 500) {\n    message = 'Internal server error'\n  }\n\n  const errorResponse = {\n    error: {\n      code,\n      message,\n      timestamp: new Date().toISOString(),\n      ...(process.env.NODE_ENV === 'development' && { \n        stack: error.stack,\n        details: error.details \n      })\n    }\n  }\n\n  return json(errorResponse, { \n    status,\n    headers: {\n      'Content-Type': 'application/json',\n      'X-Error-Code': code\n    }\n  })\n}\n\nexport function createApiError(\n  message: string, \n  status: number = 500, \n  code?: string, \n  details?: unknown\n): ApiError {\n  const error = new Error(message) as ApiError\n  error.status = status\n  error.code = code\n  error.details = details\n  return error\n}", "import { generateSecureId } from '../utils/crypto'\nimport { createApiError } from '../middleware/errorHandler'\n\nexport interface User {\n  id: string\n  email: string\n  passwordHash: string\n  createdAt: string\n  updatedAt: string\n}\n\nexport interface CreateUserData {\n  email: string\n  passwordHash: string\n}\n\nexport interface UpdateUserData {\n  email?: string\n  passwordHash?: string\n}\n\nexport async function createUser(db: D1Database, userData: CreateUserData): Promise<User> {\n  const id = await generateSecureId()\n  const now = new Date().toISOString()\n\n  try {\n    const result = await db.prepare(`\n      INSERT INTO users (id, email, password_hash, created_at, updated_at)\n      VALUES (?, ?, ?, ?, ?)\n    `).bind(id, userData.email, userData.passwordHash, now, now).run()\n\n    if (!result.success) {\n      throw createApiError('Failed to create user', 500, 'USER_CREATION_FAILED')\n    }\n\n    return {\n      id,\n      email: userData.email,\n      passwordHash: userData.passwordHash,\n      createdAt: now,\n      updatedAt: now\n    }\n  } catch (error) {\n    console.error('Create user error:', error)\n    throw createApiError('Failed to create user', 500, 'USER_CREATION_FAILED', error)\n  }\n}\n\nexport async function getUserById(db: D1Database, userId: string): Promise<User | null> {\n  try {\n    const result = await db.prepare(`\n      SELECT id, email, password_hash, created_at, updated_at\n      FROM users \n      WHERE id = ?\n    `).bind(userId).first()\n\n    if (!result) return null\n\n    return {\n      id: result.id as string,\n      email: result.email as string,\n      passwordHash: result.password_hash as string,\n      createdAt: result.created_at as string,\n      updatedAt: result.updated_at as string\n    }\n  } catch (error) {\n    console.error('Get user by ID error:', error)\n    throw createApiError('Failed to fetch user', 500, 'USER_FETCH_FAILED', error)\n  }\n}\n\nexport async function getUserByEmail(db: D1Database, email: string): Promise<User | null> {\n  try {\n    const result = await db.prepare(`\n      SELECT id, email, password_hash, created_at, updated_at\n      FROM users \n      WHERE email = ?\n    `).bind(email).first()\n\n    if (!result) return null\n\n    return {\n      id: result.id as string,\n      email: result.email as string,\n      passwordHash: result.password_hash as string,\n      createdAt: result.created_at as string,\n      updatedAt: result.updated_at as string\n    }\n  } catch (error) {\n    console.error('Get user by email error:', error)\n    throw createApiError('Failed to fetch user', 500, 'USER_FETCH_FAILED', error)\n  }\n}\n\nexport async function updateUser(db: D1Database, userId: string, updateData: UpdateUserData): Promise<User> {\n  const now = new Date().toISOString()\n  const updates: string[] = []\n  const values: any[] = []\n\n  if (updateData.email) {\n    updates.push('email = ?')\n    values.push(updateData.email)\n  }\n\n  if (updateData.passwordHash) {\n    updates.push('password_hash = ?')\n    values.push(updateData.passwordHash)\n  }\n\n  if (updates.length === 0) {\n    throw createApiError('No valid fields to update', 400, 'INVALID_UPDATE_DATA')\n  }\n\n  updates.push('updated_at = ?')\n  values.push(now, userId)\n\n  try {\n    const result = await db.prepare(`\n      UPDATE users \n      SET ${updates.join(', ')}\n      WHERE id = ?\n    `).bind(...values).run()\n\n    if (!result.success) {\n      throw createApiError('Failed to update user', 500, 'USER_UPDATE_FAILED')\n    }\n\n    const updatedUser = await getUserById(db, userId)\n    if (!updatedUser) {\n      throw createApiError('User not found after update', 404, 'USER_NOT_FOUND')\n    }\n\n    return updatedUser\n  } catch (error) {\n    console.error('Update user error:', error)\n    throw createApiError('Failed to update user', 500, 'USER_UPDATE_FAILED', error)\n  }\n}\n\nexport async function deleteUser(db: D1Database, userId: string): Promise<void> {\n  try {\n    const result = await db.prepare(`\n      DELETE FROM users WHERE id = ?\n    `).bind(userId).run()\n\n    if (!result.success) {\n      throw createApiError('Failed to delete user', 500, 'USER_DELETE_FAILED')\n    }\n  } catch (error) {\n    console.error('Delete user error:', error)\n    throw createApiError('Failed to delete user', 500, 'USER_DELETE_FAILED', error)\n  }\n}", "import { generateSecureId } from '../utils/crypto'\nimport { createApiError } from '../middleware/errorHandler'\n\nexport interface PlayerSubscription {\n  id: string\n  userId: string\n  chessComUsername: string\n  createdAt: string\n}\n\nexport interface CreateSubscriptionData {\n  userId: string\n  chessComUsername: string\n}\n\nexport async function getPlayerSubscriptions(db: D1Database, userId: string): Promise<PlayerSubscription[]> {\n  try {\n    const result = await db.prepare(`\n      SELECT id, user_id, chess_com_username, created_at\n      FROM player_subscriptions\n      WHERE user_id = ?\n      ORDER BY created_at DESC\n    `).bind(userId).all()\n\n    if (!result.results) return []\n\n    return result.results.map(row => ({\n      id: row.id as string,\n      userId: row.user_id as string,\n      chessComUsername: row.chess_com_username as string,\n      createdAt: row.created_at as string\n    }))\n  } catch (error) {\n    console.error('Get player subscriptions error:', error)\n    throw createApiError('Failed to fetch subscriptions', 500, 'SUBSCRIPTION_FETCH_FAILED', error)\n  }\n}\n\nexport async function createPlayerSubscription(db: D1Database, subscriptionData: CreateSubscriptionData): Promise<PlayerSubscription> {\n  const id = await generateSecureId()\n  const now = new Date().toISOString()\n\n  try {\n    const existingResult = await db.prepare(`\n      SELECT id FROM player_subscriptions\n      WHERE user_id = ? AND chess_com_username = ?\n    `).bind(subscriptionData.userId, subscriptionData.chessComUsername).first()\n\n    if (existingResult) {\n      throw createApiError('Already subscribed to this player', 409, 'SUBSCRIPTION_EXISTS')\n    }\n\n    const result = await db.prepare(`\n      INSERT INTO player_subscriptions (id, user_id, chess_com_username, created_at)\n      VALUES (?, ?, ?, ?)\n    `).bind(id, subscriptionData.userId, subscriptionData.chessComUsername, now).run()\n\n    if (!result.success) {\n      throw createApiError('Failed to create subscription', 500, 'SUBSCRIPTION_CREATION_FAILED')\n    }\n\n    await ensurePlayerInMonitoringSystem(db, subscriptionData.chessComUsername)\n\n    return {\n      id,\n      userId: subscriptionData.userId,\n      chessComUsername: subscriptionData.chessComUsername,\n      createdAt: now\n    }\n  } catch (error) {\n    console.error('Create subscription error:', error)\n    if (error instanceof Error && error.message.includes('UNIQUE constraint failed')) {\n      throw createApiError('Already subscribed to this player', 409, 'SUBSCRIPTION_EXISTS')\n    }\n    throw createApiError('Failed to create subscription', 500, 'SUBSCRIPTION_CREATION_FAILED', error)\n  }\n}\n\nexport async function deletePlayerSubscription(db: D1Database, userId: string, chessComUsername: string): Promise<void> {\n  try {\n    const result = await db.prepare(`\n      DELETE FROM player_subscriptions\n      WHERE user_id = ? AND chess_com_username = ?\n    `).bind(userId, chessComUsername).run()\n\n    if (!result.success) {\n      throw createApiError('Failed to delete subscription', 500, 'SUBSCRIPTION_DELETE_FAILED')\n    }\n\n    await cleanupUnusedPlayerFromMonitoring(db, chessComUsername)\n  } catch (error) {\n    console.error('Delete subscription error:', error)\n    throw createApiError('Failed to delete subscription', 500, 'SUBSCRIPTION_DELETE_FAILED', error)\n  }\n}\n\nexport async function getSubscribersForPlayer(db: D1Database, chessComUsername: string): Promise<string[]> {\n  try {\n    const result = await db.prepare(`\n      SELECT DISTINCT user_id\n      FROM player_subscriptions\n      WHERE chess_com_username = ?\n    `).bind(chessComUsername).all()\n\n    if (!result.results) return []\n\n    return result.results.map(row => row.user_id as string)\n  } catch (error) {\n    console.error('Get subscribers for player error:', error)\n    throw createApiError('Failed to fetch subscribers', 500, 'SUBSCRIBERS_FETCH_FAILED', error)\n  }\n}\n\nasync function ensurePlayerInMonitoringSystem(db: D1Database, chessComUsername: string): Promise<void> {\n  try {\n    const existingPlayer = await db.prepare(`\n      SELECT chess_com_username FROM player_status\n      WHERE chess_com_username = ?\n    `).bind(chessComUsername).first()\n\n    if (!existingPlayer) {\n      const now = new Date().toISOString()\n      await db.prepare(`\n        INSERT INTO player_status (chess_com_username, is_online, is_playing, last_checked, updated_at)\n        VALUES (?, false, false, ?, ?)\n      `).bind(chessComUsername, now, now).run()\n    }\n  } catch (error) {\n    console.error('Ensure player in monitoring system error:', error)\n  }\n}\n\nasync function cleanupUnusedPlayerFromMonitoring(db: D1Database, chessComUsername: string): Promise<void> {\n  try {\n    const subscribers = await getSubscribersForPlayer(db, chessComUsername)\n    \n    if (subscribers.length === 0) {\n      await db.prepare(`\n        DELETE FROM player_status\n        WHERE chess_com_username = ?\n      `).bind(chessComUsername).run()\n    }\n  } catch (error) {\n    console.error('Cleanup unused player error:', error)\n  }\n}", "import { createApiError } from '../middleware/errorHandler'\n\nexport interface ChessComPlayer {\n  username: string\n  playerId: number\n  title?: string\n  name?: string\n  country?: string\n  location?: string\n  joined: number\n  lastOnline?: number\n  followers?: number\n  isStreamer?: boolean\n  verified?: boolean\n}\n\nexport interface ChessComGameStatus {\n  username: string\n  isOnline: boolean\n  isPlaying: boolean\n  currentGames: ChessComGame[]\n}\n\nexport interface ChessComGame {\n  url: string\n  pgn?: string\n  timeControl: string\n  rated: boolean\n  tcn?: string\n  uuid: string\n  initialSetup?: string\n  fen?: string\n  startTime?: number\n  endTime?: number\n  accuracies?: {\n    white?: number\n    black?: number\n  }\n}\n\nconst CHESS_COM_BASE_URL = 'https://api.chess.com/pub'\nconst REQUEST_TIMEOUT = 10000 // 10 seconds\nconst RATE_LIMIT_DELAY = 200 // 200ms between requests\n\nexport async function verifyPlayerExists(username: string, baseUrl?: string): Promise<boolean> {\n  const apiUrl = baseUrl || CHESS_COM_BASE_URL\n  \n  try {\n    const response = await fetchWithTimeout(`${apiUrl}/player/${username}`, {\n      method: 'GET',\n      headers: {\n        'User-Agent': 'ChessComHelper/1.0'\n      }\n    }, REQUEST_TIMEOUT)\n\n    return response.ok\n  } catch (error) {\n    console.error('Verify player exists error:', error)\n    return false\n  }\n}\n\nexport async function getPlayerInfo(username: string, baseUrl?: string): Promise<ChessComPlayer | null> {\n  const apiUrl = baseUrl || CHESS_COM_BASE_URL\n  \n  try {\n    const response = await fetchWithTimeout(`${apiUrl}/player/${username}`, {\n      method: 'GET',\n      headers: {\n        'User-Agent': 'ChessComHelper/1.0'\n      }\n    }, REQUEST_TIMEOUT)\n\n    if (!response.ok) {\n      if (response.status === 404) {\n        return null\n      }\n      throw createApiError(`Chess.com API error: ${response.status}`, 502, 'CHESS_COM_API_ERROR')\n    }\n\n    const data = await response.json()\n    return {\n      username: data.username,\n      playerId: data.player_id,\n      title: data.title,\n      name: data.name,\n      country: data.country?.split('/').pop()?.replace('.png', ''),\n      location: data.location,\n      joined: data.joined,\n      lastOnline: data.last_online,\n      followers: data.followers,\n      isStreamer: data.is_streamer,\n      verified: data.verified\n    }\n  } catch (error) {\n    console.error('Get player info error:', error)\n    throw createApiError('Failed to fetch player information', 502, 'CHESS_COM_API_ERROR', error)\n  }\n}\n\nexport async function getPlayerCurrentGames(username: string, baseUrl?: string): Promise<ChessComGame[]> {\n  const apiUrl = baseUrl || CHESS_COM_BASE_URL\n  \n  try {\n    const response = await fetchWithTimeout(`${apiUrl}/player/${username}/games/current`, {\n      method: 'GET',\n      headers: {\n        'User-Agent': 'ChessComHelper/1.0'\n      }\n    }, REQUEST_TIMEOUT)\n\n    if (!response.ok) {\n      if (response.status === 404) {\n        return []\n      }\n      throw createApiError(`Chess.com API error: ${response.status}`, 502, 'CHESS_COM_API_ERROR')\n    }\n\n    const data = await response.json()\n    return data.games || []\n  } catch (error) {\n    console.error('Get player current games error:', error)\n    throw createApiError('Failed to fetch current games', 502, 'CHESS_COM_API_ERROR', error)\n  }\n}\n\nexport async function getPlayerGameStatus(username: string, baseUrl?: string): Promise<ChessComGameStatus> {\n  const apiUrl = baseUrl || CHESS_COM_BASE_URL\n  \n  try {\n    const [playerInfo, currentGames] = await Promise.all([\n      getPlayerInfo(username, apiUrl),\n      getPlayerCurrentGames(username, apiUrl)\n    ])\n\n    const isOnline = playerInfo ? isPlayerOnline(playerInfo.lastOnline) : false\n    const isPlaying = currentGames.length > 0\n\n    return {\n      username,\n      isOnline,\n      isPlaying,\n      currentGames\n    }\n  } catch (error) {\n    console.error('Get player game status error:', error)\n    throw createApiError('Failed to fetch player game status', 502, 'CHESS_COM_API_ERROR', error)\n  }\n}\n\nexport async function batchGetPlayerStatuses(usernames: string[], baseUrl?: string): Promise<ChessComGameStatus[]> {\n  const results: ChessComGameStatus[] = []\n  \n  for (const username of usernames) {\n    try {\n      const status = await getPlayerGameStatus(username, baseUrl)\n      results.push(status)\n      \n      if (usernames.length > 1) {\n        await delay(RATE_LIMIT_DELAY)\n      }\n    } catch (error) {\n      console.error(`Failed to get status for ${username}:`, error)\n      results.push({\n        username,\n        isOnline: false,\n        isPlaying: false,\n        currentGames: []\n      })\n    }\n  }\n  \n  return results\n}\n\nfunction isPlayerOnline(lastOnline?: number): boolean {\n  if (!lastOnline) return false\n  \n  const fiveMinutesAgo = Date.now() / 1000 - 300\n  return lastOnline > fiveMinutesAgo\n}\n\nasync function fetchWithTimeout(url: string, options: RequestInit, timeout: number): Promise<Response> {\n  const controller = new AbortController()\n  const timeoutId = setTimeout(() => controller.abort(), timeout)\n  \n  try {\n    const response = await fetch(url, {\n      ...options,\n      signal: controller.signal\n    })\n    return response\n  } finally {\n    clearTimeout(timeoutId)\n  }\n}\n\nfunction delay(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms))\n}", "import { createApiError } from '../middleware/errorHandler'\n\nexport interface PlayerStatus {\n  chessComUsername: string\n  isOnline: boolean\n  isPlaying: boolean\n  currentGameUrl: string | null\n  lastSeen: string | null\n  lastChecked: string\n  updatedAt: string\n}\n\nexport interface MonitoringStatus {\n  totalPlayersMonitored: number\n  activeGames: number\n  lastFullCheck: string | null\n  systemStatus: 'healthy' | 'degraded' | 'down'\n  checksLast24Hours: number\n}\n\nexport async function getPlayerStatus(db: D1Database, chessComUsername: string): Promise<PlayerStatus | null> {\n  try {\n    const result = await db.prepare(`\n      SELECT chess_com_username, is_online, is_playing, current_game_url, \n             last_seen, last_checked, updated_at\n      FROM player_status\n      WHERE chess_com_username = ?\n    `).bind(chessComUsername).first()\n\n    if (!result) return null\n\n    return {\n      chessComUsername: result.chess_com_username as string,\n      isOnline: Boolean(result.is_online),\n      isPlaying: Boolean(result.is_playing),\n      currentGameUrl: result.current_game_url as string | null,\n      lastSeen: result.last_seen as string | null,\n      lastChecked: result.last_checked as string,\n      updatedAt: result.updated_at as string\n    }\n  } catch (error) {\n    console.error('Get player status error:', error)\n    throw createApiError('Failed to fetch player status', 500, 'PLAYER_STATUS_FETCH_FAILED', error)\n  }\n}\n\nexport async function updatePlayerStatus(db: D1Database, chessComUsername: string, status: {\n  isOnline: boolean\n  isPlaying: boolean\n  currentGameUrl?: string | null\n  lastSeen?: string | null\n}): Promise<void> {\n  const now = new Date().toISOString()\n\n  try {\n    const result = await db.prepare(`\n      INSERT INTO player_status (\n        chess_com_username, is_online, is_playing, current_game_url, \n        last_seen, last_checked, updated_at\n      )\n      VALUES (?, ?, ?, ?, ?, ?, ?)\n      ON CONFLICT(chess_com_username) DO UPDATE SET\n        is_online = excluded.is_online,\n        is_playing = excluded.is_playing,\n        current_game_url = excluded.current_game_url,\n        last_seen = COALESCE(excluded.last_seen, last_seen),\n        last_checked = excluded.last_checked,\n        updated_at = excluded.updated_at\n    `).bind(\n      chessComUsername,\n      status.isOnline,\n      status.isPlaying,\n      status.currentGameUrl || null,\n      status.lastSeen || null,\n      now,\n      now\n    ).run()\n\n    if (!result.success) {\n      throw createApiError('Failed to update player status', 500, 'PLAYER_STATUS_UPDATE_FAILED')\n    }\n  } catch (error) {\n    console.error('Update player status error:', error)\n    throw createApiError('Failed to update player status', 500, 'PLAYER_STATUS_UPDATE_FAILED', error)\n  }\n}\n\nexport async function getAllMonitoredPlayers(db: D1Database): Promise<string[]> {\n  try {\n    const result = await db.prepare(`\n      SELECT DISTINCT chess_com_username\n      FROM player_subscriptions\n      ORDER BY chess_com_username\n    `).all()\n\n    if (!result.results) return []\n\n    return result.results.map(row => row.chess_com_username as string)\n  } catch (error) {\n    console.error('Get all monitored players error:', error)\n    throw createApiError('Failed to fetch monitored players', 500, 'MONITORED_PLAYERS_FETCH_FAILED', error)\n  }\n}\n\nexport async function getPlayersWithStatusChanges(db: D1Database, since: string): Promise<PlayerStatus[]> {\n  try {\n    const result = await db.prepare(`\n      SELECT chess_com_username, is_online, is_playing, current_game_url,\n             last_seen, last_checked, updated_at\n      FROM player_status\n      WHERE updated_at > ?\n      ORDER BY updated_at DESC\n    `).bind(since).all()\n\n    if (!result.results) return []\n\n    return result.results.map(row => ({\n      chessComUsername: row.chess_com_username as string,\n      isOnline: Boolean(row.is_online),\n      isPlaying: Boolean(row.is_playing),\n      currentGameUrl: row.current_game_url as string | null,\n      lastSeen: row.last_seen as string | null,\n      lastChecked: row.last_checked as string,\n      updatedAt: row.updated_at as string\n    }))\n  } catch (error) {\n    console.error('Get players with status changes error:', error)\n    throw createApiError('Failed to fetch status changes', 500, 'STATUS_CHANGES_FETCH_FAILED', error)\n  }\n}\n\nexport async function getMonitoringStatus(db: D1Database): Promise<MonitoringStatus> {\n  try {\n    const [totalPlayers, activeGames, recentJobs] = await Promise.all([\n      getTotalMonitoredPlayers(db),\n      getActiveGamesCount(db),\n      getRecentMonitoringJobs(db)\n    ])\n\n    const lastFullCheck = recentJobs.length > 0 ? recentJobs[0].completedAt : null\n    const checksLast24Hours = recentJobs.filter(job => {\n      const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1000)\n      return new Date(job.completedAt || job.createdAt) > twentyFourHoursAgo\n    }).length\n\n    let systemStatus: 'healthy' | 'degraded' | 'down' = 'healthy'\n    if (checksLast24Hours === 0) {\n      systemStatus = 'down'\n    } else if (checksLast24Hours < 100) { // Assuming 5-minute intervals = ~288 checks per day\n      systemStatus = 'degraded'\n    }\n\n    return {\n      totalPlayersMonitored: totalPlayers,\n      activeGames,\n      lastFullCheck,\n      systemStatus,\n      checksLast24Hours\n    }\n  } catch (error) {\n    console.error('Get monitoring status error:', error)\n    throw createApiError('Failed to fetch monitoring status', 500, 'MONITORING_STATUS_FETCH_FAILED', error)\n  }\n}\n\nasync function getTotalMonitoredPlayers(db: D1Database): Promise<number> {\n  const result = await db.prepare(`\n    SELECT COUNT(DISTINCT chess_com_username) as count\n    FROM player_subscriptions\n  `).first()\n\n  return result?.count as number || 0\n}\n\nasync function getActiveGamesCount(db: D1Database): Promise<number> {\n  const result = await db.prepare(`\n    SELECT COUNT(*) as count\n    FROM player_status\n    WHERE is_playing = true\n  `).first()\n\n  return result?.count as number || 0\n}\n\nasync function getRecentMonitoringJobs(db: D1Database): Promise<Array<{\n  id: string\n  jobType: string\n  status: string\n  createdAt: string\n  completedAt: string | null\n}>> {\n  const result = await db.prepare(`\n    SELECT id, job_type, status, created_at, completed_at\n    FROM monitoring_jobs\n    WHERE job_type IN ('player_check', 'batch_poll')\n    ORDER BY created_at DESC\n    LIMIT 10\n  `).all()\n\n  if (!result.results) return []\n\n  return result.results.map(row => ({\n    id: row.id as string,\n    jobType: row.job_type as string,\n    status: row.status as string,\n    createdAt: row.created_at as string,\n    completedAt: row.completed_at as string | null\n  }))\n}", "import { generateSecureId } from '../utils/crypto'\nimport { createApiError } from '../middleware/errorHandler'\nimport { logNotificationSent } from './notificationService'\nimport { getUserById } from './userService'\nimport type { Env } from '../index'\n\nexport interface EmailTemplate {\n  subject: string\n  html: string\n  text: string\n}\n\nexport interface NotificationEmailData {\n  playerName: string\n  gameUrl?: string\n  result?: string\n}\n\nexport interface EmailSendResult {\n  notificationId: string\n  delivered: boolean\n  messageId?: string\n  error?: string\n}\n\nconst EMAIL_TEMPLATES = {\n  game_started: {\n    subject: (playerName: string) => `\uD83C\uDFAF ${playerName} is now playing on Chess.com!`,\n    html: (data: NotificationEmailData) => `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n        <h2 style=\"color: #2e7d32;\">\u265F\uFE0F Game Alert</h2>\n        <p><strong>${data.playerName}</strong> just started a new game on Chess.com!</p>\n        ${data.gameUrl ? `\n          <p>\n            <a href=\"${data.gameUrl}\" \n               style=\"background: #2e7d32; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;\">\n              Watch Live Game\n            </a>\n          </p>\n        ` : ''}\n        <hr style=\"margin: 20px 0; border: 1px solid #eee;\">\n        <p style=\"font-size: 12px; color: #666;\">\n          This notification was sent by Chess.com Helper.<br>\n          <a href=\"{{unsubscribeUrl}}\">Unsubscribe from ${data.playerName}</a> | \n          <a href=\"{{settingsUrl}}\">Manage all subscriptions</a>\n        </p>\n      </div>\n    `,\n    text: (data: NotificationEmailData) => `\n\u265F\uFE0F Game Alert\n\n${data.playerName} just started a new game on Chess.com!\n\n${data.gameUrl ? `Watch the game live: ${data.gameUrl}` : ''}\n\n---\nThis notification was sent by Chess.com Helper.\nManage your subscriptions: {{settingsUrl}}\n    `\n  },\n  game_ended: {\n    subject: (playerName: string) => `\u265F\uFE0F ${playerName}'s game has ended`,\n    html: (data: NotificationEmailData) => `\n      <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n        <h2 style=\"color: #1976d2;\">\u265F\uFE0F Game Complete</h2>\n        <p><strong>${data.playerName}</strong>'s game on Chess.com has finished.</p>\n        ${data.result ? `<p><strong>Result:</strong> ${data.result}</p>` : ''}\n        <hr style=\"margin: 20px 0; border: 1px solid #eee;\">\n        <p style=\"font-size: 12px; color: #666;\">\n          This notification was sent by Chess.com Helper.<br>\n          <a href=\"{{unsubscribeUrl}}\">Unsubscribe from ${data.playerName}</a> | \n          <a href=\"{{settingsUrl}}\">Manage all subscriptions</a>\n        </p>\n      </div>\n    `,\n    text: (data: NotificationEmailData) => `\n\u265F\uFE0F Game Complete\n\n${data.playerName}'s game on Chess.com has finished.\n${data.result ? `Result: ${data.result}` : ''}\n\n---\nThis notification was sent by Chess.com Helper.\nManage your subscriptions: {{settingsUrl}}\n    `\n  }\n}\n\nexport async function sendNotificationEmail(\n  env: Env, \n  userId: string, \n  type: 'game_started' | 'game_ended', \n  data: NotificationEmailData\n): Promise<EmailSendResult> {\n  const notificationId = await generateSecureId()\n\n  try {\n    const user = await getUserById(env.DB, userId)\n    if (!user) {\n      throw createApiError('User not found', 404, 'USER_NOT_FOUND')\n    }\n\n    const template = EMAIL_TEMPLATES[type]\n    const subject = template.subject(data.playerName)\n    const html = template.html(data)\n      .replace('{{settingsUrl}}', `${getBaseUrl()}/settings`)\n      .replace('{{unsubscribeUrl}}', `${getBaseUrl()}/unsubscribe/${userId}/${data.playerName}`)\n    const text = template.text(data)\n      .replace('{{settingsUrl}}', `${getBaseUrl()}/settings`)\n      .replace('{{unsubscribeUrl}}', `${getBaseUrl()}/unsubscribe/${userId}/${data.playerName}`)\n\n    const emailResult = await sendEmail({\n      to: user.email,\n      subject,\n      html,\n      text\n    }, env)\n\n    await logNotificationSent(env.DB, {\n      userId,\n      chessComUsername: data.playerName,\n      notificationType: type,\n      emailDelivered: emailResult.success\n    })\n\n    return {\n      notificationId,\n      delivered: emailResult.success,\n      messageId: emailResult.messageId,\n      error: emailResult.error\n    }\n  } catch (error) {\n    console.error('Send notification email error:', error)\n\n    await logNotificationSent(env.DB, {\n      userId,\n      chessComUsername: data.playerName,\n      notificationType: type,\n      emailDelivered: false\n    }).catch(logError => console.error('Failed to log notification failure:', logError))\n\n    return {\n      notificationId,\n      delivered: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    }\n  }\n}\n\nasync function sendEmail(email: {\n  to: string\n  subject: string\n  html: string\n  text: string\n}, env: Env): Promise<{ success: boolean; messageId?: string; error?: string }> {\n  try {\n    // Using Resend API\n    if (env.RESEND_API_KEY) {\n      return await sendWithResend(email, env.RESEND_API_KEY)\n    }\n\n    // Fallback or other email service\n    throw createApiError('No email service configured', 500, 'EMAIL_SERVICE_NOT_CONFIGURED')\n  } catch (error) {\n    console.error('Send email error:', error)\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Email send failed'\n    }\n  }\n}\n\nasync function sendWithResend(email: {\n  to: string\n  subject: string\n  html: string\n  text: string\n}, apiKey: string): Promise<{ success: boolean; messageId?: string; error?: string }> {\n  try {\n    const response = await fetch('https://api.resend.com/emails', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${apiKey}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        from: 'Chess.com Helper <notifications@chesshelper.app>',\n        to: email.to,\n        subject: email.subject,\n        html: email.html,\n        text: email.text\n      })\n    })\n\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({}))\n      throw createApiError(\n        `Resend API error: ${response.status}`, \n        502, \n        'EMAIL_SERVICE_ERROR',\n        errorData\n      )\n    }\n\n    const result = await response.json()\n    return {\n      success: true,\n      messageId: result.id\n    }\n  } catch (error) {\n    console.error('Resend email error:', error)\n    return {\n      success: false,\n      error: error instanceof Error ? error.message : 'Resend API failed'\n    }\n  }\n}\n\nfunction getBaseUrl(): string {\n  // This would be configured based on environment\n  return 'https://chesshelper.app'\n}", "import { generateSecureId } from '../utils/crypto'\nimport { createApiError } from '../middleware/errorHandler'\n\nexport interface NotificationPreferences {\n  userId: string\n  emailNotifications: boolean\n  notificationFrequency: 'immediate' | 'digest' | 'disabled'\n  createdAt: string\n  updatedAt: string\n}\n\nexport interface NotificationLog {\n  id: string\n  userId: string\n  chessComUsername: string\n  notificationType: 'game_started' | 'game_ended'\n  sentAt: string\n  emailDelivered: boolean\n}\n\nexport interface QueuedNotification {\n  id: string\n  userId: string\n  playerName: string\n  eventType: 'game_started' | 'game_ended'\n  gameUrl?: string\n  result?: string\n  queuedAt: string\n}\n\nexport async function getNotificationPreferences(db: D1Database, userId: string): Promise<NotificationPreferences | null> {\n  try {\n    const result = await db.prepare(`\n      SELECT user_id, email_notifications, notification_frequency, created_at, updated_at\n      FROM user_preferences\n      WHERE user_id = ?\n    `).bind(userId).first()\n\n    if (!result) return null\n\n    return {\n      userId: result.user_id as string,\n      emailNotifications: Boolean(result.email_notifications),\n      notificationFrequency: result.notification_frequency as 'immediate' | 'digest' | 'disabled',\n      createdAt: result.created_at as string,\n      updatedAt: result.updated_at as string\n    }\n  } catch (error) {\n    console.error('Get notification preferences error:', error)\n    throw createApiError('Failed to fetch notification preferences', 500, 'NOTIFICATION_PREFERENCES_FETCH_FAILED', error)\n  }\n}\n\nexport async function updateNotificationPreferences(db: D1Database, userId: string, updates: {\n  emailNotifications?: boolean\n  notificationFrequency?: 'immediate' | 'digest' | 'disabled'\n}): Promise<NotificationPreferences> {\n  const now = new Date().toISOString()\n\n  try {\n    const updateFields: string[] = []\n    const values: any[] = []\n\n    if (updates.emailNotifications !== undefined) {\n      updateFields.push('email_notifications = ?')\n      values.push(updates.emailNotifications)\n    }\n\n    if (updates.notificationFrequency) {\n      updateFields.push('notification_frequency = ?')\n      values.push(updates.notificationFrequency)\n    }\n\n    if (updateFields.length === 0) {\n      throw createApiError('No valid fields to update', 400, 'INVALID_UPDATE_DATA')\n    }\n\n    updateFields.push('updated_at = ?')\n    values.push(now, userId)\n\n    await db.prepare(`\n      UPDATE user_preferences \n      SET ${updateFields.join(', ')}\n      WHERE user_id = ?\n    `).bind(...values).run()\n\n    const preferences = await getNotificationPreferences(db, userId)\n    if (!preferences) {\n      throw createApiError('Failed to retrieve updated preferences', 500, 'PREFERENCES_UPDATE_FAILED')\n    }\n\n    return preferences\n  } catch (error) {\n    console.error('Update notification preferences error:', error)\n    throw createApiError('Failed to update notification preferences', 500, 'NOTIFICATION_PREFERENCES_UPDATE_FAILED', error)\n  }\n}\n\nexport async function getNotificationHistory(db: D1Database, userId: string, options: {\n  limit: number\n  offset: number\n}): Promise<NotificationLog[]> {\n  try {\n    const result = await db.prepare(`\n      SELECT id, user_id, chess_com_username, notification_type, sent_at, email_delivered\n      FROM notification_log\n      WHERE user_id = ?\n      ORDER BY sent_at DESC\n      LIMIT ? OFFSET ?\n    `).bind(userId, options.limit, options.offset).all()\n\n    if (!result.results) return []\n\n    return result.results.map(row => ({\n      id: row.id as string,\n      userId: row.user_id as string,\n      chessComUsername: row.chess_com_username as string,\n      notificationType: row.notification_type as 'game_started' | 'game_ended',\n      sentAt: row.sent_at as string,\n      emailDelivered: Boolean(row.email_delivered)\n    }))\n  } catch (error) {\n    console.error('Get notification history error:', error)\n    throw createApiError('Failed to fetch notification history', 500, 'NOTIFICATION_HISTORY_FETCH_FAILED', error)\n  }\n}\n\nexport async function logNotificationSent(db: D1Database, notification: {\n  userId: string\n  chessComUsername: string\n  notificationType: 'game_started' | 'game_ended'\n  emailDelivered: boolean\n}): Promise<NotificationLog> {\n  const id = await generateSecureId()\n  const now = new Date().toISOString()\n\n  try {\n    const result = await db.prepare(`\n      INSERT INTO notification_log (id, user_id, chess_com_username, notification_type, sent_at, email_delivered)\n      VALUES (?, ?, ?, ?, ?, ?)\n    `).bind(\n      id,\n      notification.userId,\n      notification.chessComUsername,\n      notification.notificationType,\n      now,\n      notification.emailDelivered\n    ).run()\n\n    if (!result.success) {\n      throw createApiError('Failed to log notification', 500, 'NOTIFICATION_LOG_FAILED')\n    }\n\n    return {\n      id,\n      userId: notification.userId,\n      chessComUsername: notification.chessComUsername,\n      notificationType: notification.notificationType,\n      sentAt: now,\n      emailDelivered: notification.emailDelivered\n    }\n  } catch (error) {\n    console.error('Log notification sent error:', error)\n    throw createApiError('Failed to log notification', 500, 'NOTIFICATION_LOG_FAILED', error)\n  }\n}\n\nexport async function queueNotification(db: D1Database, notification: {\n  userId: string\n  playerName: string\n  eventType: 'game_started' | 'game_ended'\n  gameUrl?: string\n  result?: string\n}): Promise<QueuedNotification> {\n  const id = await generateSecureId()\n  const now = new Date().toISOString()\n\n  try {\n    const recentNotification = await db.prepare(`\n      SELECT id FROM notification_log\n      WHERE user_id = ? AND chess_com_username = ? AND notification_type = ?\n      AND sent_at > datetime('now', '-5 minutes')\n      LIMIT 1\n    `).bind(notification.userId, notification.playerName, notification.eventType).first()\n\n    if (recentNotification) {\n      throw createApiError('Duplicate notification prevented', 409, 'DUPLICATE_NOTIFICATION')\n    }\n\n    // For immediate processing, we'll directly trigger the email\n    const emailResult = await import('./emailService').then(m =>\n      m.sendNotificationEmail(\n        { DB: db } as any, // Simplified for this context\n        notification.userId,\n        notification.eventType,\n        {\n          playerName: notification.playerName,\n          gameUrl: notification.gameUrl,\n          result: notification.result\n        }\n      )\n    )\n\n    return {\n      id,\n      userId: notification.userId,\n      playerName: notification.playerName,\n      eventType: notification.eventType,\n      gameUrl: notification.gameUrl,\n      result: notification.result,\n      queuedAt: now\n    }\n  } catch (error) {\n    console.error('Queue notification error:', error)\n    throw createApiError('Failed to queue notification', 500, 'NOTIFICATION_QUEUE_FAILED', error)\n  }\n}\n\nexport async function shouldSendNotification(db: D1Database, userId: string, playerName: string, eventType: 'game_started' | 'game_ended'): Promise<boolean> {\n  try {\n    const preferences = await getNotificationPreferences(db, userId)\n    \n    if (!preferences || !preferences.emailNotifications || preferences.notificationFrequency === 'disabled') {\n      return false\n    }\n\n    const recentNotification = await db.prepare(`\n      SELECT id FROM notification_log\n      WHERE user_id = ? AND chess_com_username = ? AND notification_type = ?\n      AND sent_at > datetime('now', '-5 minutes')\n      LIMIT 1\n    `).bind(userId, playerName, eventType).first()\n\n    return !recentNotification\n  } catch (error) {\n    console.error('Should send notification check error:', error)\n    return false\n  }\n}", "import { generateSecureId } from '../utils/crypto'\nimport { getAllMonitoredPlayers, updatePlayerStatus, getPlayerStatus } from '../services/monitoringService'\nimport { batchGetPlayerStatuses, getPlayerGameStatus } from '../services/chessComService'\nimport { getSubscribersForPlayer } from '../services/subscriptionService'\nimport { shouldSendNotification, queueNotification } from '../services/notificationService'\nimport type { Env } from '../index'\n\nexport interface MonitoringJobResult {\n  playersChecked: number\n  notificationsSent: number\n  errors: string[]\n  duration: number\n}\n\nexport async function checkPlayerStatus(env: Env, ctx: ExecutionContext): Promise<MonitoringJobResult> {\n  const startTime = Date.now()\n  const jobId = await generateSecureId()\n  const errors: string[] = []\n  let playersChecked = 0\n  let notificationsSent = 0\n\n  try {\n    await logJobStart(env.DB, jobId, 'batch_poll')\n\n    const monitoredPlayers = await getAllMonitoredPlayers(env.DB)\n    if (monitoredPlayers.length === 0) {\n      await logJobComplete(env.DB, jobId, 'completed')\n      return { playersChecked: 0, notificationsSent: 0, errors: [], duration: Date.now() - startTime }\n    }\n\n    console.log(`Starting monitoring check for ${monitoredPlayers.length} players`)\n\n    const batchSize = 10\n    const batches = chunkArray(monitoredPlayers, batchSize)\n\n    for (const batch of batches) {\n      try {\n        const playerStatuses = await batchGetPlayerStatuses(batch, env.CHESS_COM_API_URL)\n        \n        for (const status of playerStatuses) {\n          try {\n            const previousStatus = await getPlayerStatus(env.DB, status.username)\n            \n            await updatePlayerStatus(env.DB, status.username, {\n              isOnline: status.isOnline,\n              isPlaying: status.isPlaying,\n              currentGameUrl: status.currentGames[0]?.url || null,\n              lastSeen: status.isOnline ? new Date().toISOString() : undefined\n            })\n\n            playersChecked++\n\n            const statusChanged = !previousStatus || \n              (previousStatus.isPlaying !== status.isPlaying)\n\n            if (statusChanged && status.isPlaying && !previousStatus?.isPlaying) {\n              const notificationCount = await sendGameStartedNotifications(\n                env, \n                status.username, \n                status.currentGames[0]?.url\n              )\n              notificationsSent += notificationCount\n            }\n\n            if (statusChanged && !status.isPlaying && previousStatus?.isPlaying) {\n              const notificationCount = await sendGameEndedNotifications(\n                env, \n                status.username\n              )\n              notificationsSent += notificationCount\n            }\n\n          } catch (playerError) {\n            const errorMsg = `Error processing player ${status.username}: ${playerError}`\n            console.error(errorMsg)\n            errors.push(errorMsg)\n          }\n        }\n\n        await new Promise(resolve => setTimeout(resolve, 1000))\n\n      } catch (batchError) {\n        const errorMsg = `Error processing batch: ${batchError}`\n        console.error(errorMsg)\n        errors.push(errorMsg)\n      }\n    }\n\n    await logJobComplete(env.DB, jobId, 'completed')\n    console.log(`Monitoring check completed: ${playersChecked} players checked, ${notificationsSent} notifications sent`)\n\n  } catch (error) {\n    const errorMsg = `Monitoring job failed: ${error}`\n    console.error(errorMsg)\n    errors.push(errorMsg)\n    await logJobComplete(env.DB, jobId, 'failed', errorMsg)\n  }\n\n  return {\n    playersChecked,\n    notificationsSent, \n    errors,\n    duration: Date.now() - startTime\n  }\n}\n\nexport async function checkSpecificPlayers(env: Env, playernames?: string[]): Promise<MonitoringJobResult> {\n  const startTime = Date.now()\n  const jobId = await generateSecureId()\n  const errors: string[] = []\n  let playersChecked = 0\n  let notificationsSent = 0\n\n  try {\n    await logJobStart(env.DB, jobId, 'player_check')\n\n    const playersToCheck = playernames || await getAllMonitoredPlayers(env.DB)\n    \n    if (playersToCheck.length === 0) {\n      await logJobComplete(env.DB, jobId, 'completed')\n      return { playersChecked: 0, notificationsSent: 0, errors: [], duration: Date.now() - startTime }\n    }\n\n    console.log(`Checking specific players: ${playersToCheck.join(', ')}`)\n\n    for (const playerName of playersToCheck) {\n      try {\n        const status = await getPlayerGameStatus(playerName, env.CHESS_COM_API_URL)\n        const previousStatus = await getPlayerStatus(env.DB, playerName)\n\n        await updatePlayerStatus(env.DB, playerName, {\n          isOnline: status.isOnline,\n          isPlaying: status.isPlaying,\n          currentGameUrl: status.currentGames[0]?.url || null,\n          lastSeen: status.isOnline ? new Date().toISOString() : undefined\n        })\n\n        playersChecked++\n\n        const statusChanged = !previousStatus || \n          (previousStatus.isPlaying !== status.isPlaying)\n\n        if (statusChanged && status.isPlaying && !previousStatus?.isPlaying) {\n          const notificationCount = await sendGameStartedNotifications(\n            env,\n            playerName,\n            status.currentGames[0]?.url\n          )\n          notificationsSent += notificationCount\n        }\n\n      } catch (playerError) {\n        const errorMsg = `Error checking player ${playerName}: ${playerError}`\n        console.error(errorMsg)\n        errors.push(errorMsg)\n      }\n\n      await new Promise(resolve => setTimeout(resolve, 500))\n    }\n\n    await logJobComplete(env.DB, jobId, 'completed')\n\n  } catch (error) {\n    const errorMsg = `Player check job failed: ${error}`\n    console.error(errorMsg)\n    errors.push(errorMsg)\n    await logJobComplete(env.DB, jobId, 'failed', errorMsg)\n  }\n\n  return {\n    playersChecked,\n    notificationsSent,\n    errors,\n    duration: Date.now() - startTime\n  }\n}\n\nasync function sendGameStartedNotifications(env: Env, playerName: string, gameUrl?: string): Promise<number> {\n  try {\n    const subscribers = await getSubscribersForPlayer(env.DB, playerName)\n    let notificationsSent = 0\n\n    for (const userId of subscribers) {\n      try {\n        const shouldSend = await shouldSendNotification(env.DB, userId, playerName, 'game_started')\n        \n        if (shouldSend) {\n          await queueNotification(env.DB, {\n            userId,\n            playerName,\n            eventType: 'game_started',\n            gameUrl\n          })\n          notificationsSent++\n        }\n      } catch (error) {\n        console.error(`Failed to send game started notification to user ${userId}:`, error)\n      }\n    }\n\n    return notificationsSent\n  } catch (error) {\n    console.error(`Failed to send game started notifications for ${playerName}:`, error)\n    return 0\n  }\n}\n\nasync function sendGameEndedNotifications(env: Env, playerName: string): Promise<number> {\n  try {\n    const subscribers = await getSubscribersForPlayer(env.DB, playerName)\n    let notificationsSent = 0\n\n    for (const userId of subscribers) {\n      try {\n        const shouldSend = await shouldSendNotification(env.DB, userId, playerName, 'game_ended')\n        \n        if (shouldSend) {\n          await queueNotification(env.DB, {\n            userId,\n            playerName,\n            eventType: 'game_ended'\n          })\n          notificationsSent++\n        }\n      } catch (error) {\n        console.error(`Failed to send game ended notification to user ${userId}:`, error)\n      }\n    }\n\n    return notificationsSent\n  } catch (error) {\n    console.error(`Failed to send game ended notifications for ${playerName}:`, error)\n    return 0\n  }\n}\n\nasync function logJobStart(db: D1Database, jobId: string, jobType: string): Promise<void> {\n  try {\n    const now = new Date().toISOString()\n    await db.prepare(`\n      INSERT INTO monitoring_jobs (id, job_type, status, started_at, created_at)\n      VALUES (?, ?, 'running', ?, ?)\n    `).bind(jobId, jobType, now, now).run()\n  } catch (error) {\n    console.error('Failed to log job start:', error)\n  }\n}\n\nasync function logJobComplete(db: D1Database, jobId: string, status: string, errorMessage?: string): Promise<void> {\n  try {\n    const now = new Date().toISOString()\n    await db.prepare(`\n      UPDATE monitoring_jobs\n      SET status = ?, completed_at = ?, error_message = ?\n      WHERE id = ?\n    `).bind(status, now, errorMessage || null, jobId).run()\n  } catch (error) {\n    console.error('Failed to log job completion:', error)\n  }\n}\n\nfunction chunkArray<T>(array: T[], size: number): T[][] {\n  const chunks: T[][] = []\n  for (let i = 0; i < array.length; i += size) {\n    chunks.push(array.slice(i, i + size))\n  }\n  return chunks\n}", "import { generateSecureId } from '../utils/crypto'\nimport type { Env } from '../index'\n\nexport interface CleanupJobResult {\n  expiredTasksRemoved: number\n  oldNotificationsRemoved: number\n  oldJobsRemoved: number\n  errors: string[]\n  duration: number\n}\n\nexport async function cleanupExpiredTasks(env: Env, ctx: ExecutionContext): Promise<CleanupJobResult> {\n  const startTime = Date.now()\n  const jobId = await generateSecureId()\n  const errors: string[] = []\n  let expiredTasksRemoved = 0\n  let oldNotificationsRemoved = 0\n  let oldJobsRemoved = 0\n\n  try {\n    await logCleanupJobStart(env.DB, jobId)\n\n    expiredTasksRemoved = await cleanupOldAgentTasks(env.DB)\n\n    oldNotificationsRemoved = await cleanupOldNotificationLogs(env.DB)\n\n    oldJobsRemoved = await cleanupOldMonitoringJobs(env.DB)\n\n    await logCleanupJobComplete(env.DB, jobId, 'completed')\n    \n    console.log(`Cleanup completed: ${expiredTasksRemoved} tasks, ${oldNotificationsRemoved} notifications, ${oldJobsRemoved} jobs removed`)\n\n  } catch (error) {\n    const errorMsg = `Cleanup job failed: ${error}`\n    console.error(errorMsg)\n    errors.push(errorMsg)\n    await logCleanupJobComplete(env.DB, jobId, 'failed', errorMsg)\n  }\n\n  return {\n    expiredTasksRemoved,\n    oldNotificationsRemoved,\n    oldJobsRemoved,\n    errors,\n    duration: Date.now() - startTime\n  }\n}\n\nasync function cleanupOldAgentTasks(db: D1Database): Promise<number> {\n  try {\n    const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString()\n    \n    const result = await db.prepare(`\n      DELETE FROM agent_tasks\n      WHERE (status IN ('completed', 'failed') AND completed_at < ?)\n         OR (status = 'pending' AND created_at < ?)\n    `).bind(thirtyDaysAgo, thirtyDaysAgo).run()\n\n    console.log(`Cleaned up ${result.changes || 0} old agent tasks`)\n    return result.changes || 0\n  } catch (error) {\n    console.error('Failed to cleanup old agent tasks:', error)\n    return 0\n  }\n}\n\nasync function cleanupOldNotificationLogs(db: D1Database): Promise<number> {\n  try {\n    const ninetyDaysAgo = new Date(Date.now() - 90 * 24 * 60 * 60 * 1000).toISOString()\n    \n    const result = await db.prepare(`\n      DELETE FROM notification_log\n      WHERE sent_at < ?\n    `).bind(ninetyDaysAgo).run()\n\n    console.log(`Cleaned up ${result.changes || 0} old notification logs`)\n    return result.changes || 0\n  } catch (error) {\n    console.error('Failed to cleanup old notification logs:', error)\n    return 0\n  }\n}\n\nasync function cleanupOldMonitoringJobs(db: D1Database): Promise<number> {\n  try {\n    const sevenDaysAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString()\n    \n    const result = await db.prepare(`\n      DELETE FROM monitoring_jobs\n      WHERE (status IN ('completed', 'failed') AND completed_at < ?)\n         OR (status = 'pending' AND created_at < ?)\n    `).bind(sevenDaysAgo, sevenDaysAgo).run()\n\n    console.log(`Cleaned up ${result.changes || 0} old monitoring jobs`)\n    return result.changes || 0\n  } catch (error) {\n    console.error('Failed to cleanup old monitoring jobs:', error)\n    return 0\n  }\n}\n\nexport async function cleanupOrphanedPlayerStatuses(env: Env): Promise<number> {\n  try {\n    const result = await env.DB.prepare(`\n      DELETE FROM player_status\n      WHERE chess_com_username NOT IN (\n        SELECT DISTINCT chess_com_username FROM player_subscriptions\n      )\n    `).run()\n\n    console.log(`Cleaned up ${result.changes || 0} orphaned player statuses`)\n    return result.changes || 0\n  } catch (error) {\n    console.error('Failed to cleanup orphaned player statuses:', error)\n    return 0\n  }\n}\n\nexport async function cleanupExpiredAgentResults(env: Env): Promise<number> {\n  try {\n    const sevenDaysAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString()\n    \n    const result = await env.DB.prepare(`\n      DELETE FROM agent_results\n      WHERE created_at < ?\n        AND task_id NOT IN (\n          SELECT id FROM agent_tasks WHERE status = 'processing'\n        )\n    `).bind(sevenDaysAgo).run()\n\n    console.log(`Cleaned up ${result.changes || 0} expired agent results`)\n    return result.changes || 0\n  } catch (error) {\n    console.error('Failed to cleanup expired agent results:', error)\n    return 0\n  }\n}\n\nexport async function optimizeDatabaseTables(env: Env): Promise<void> {\n  try {\n    // Vacuum the database to reclaim space and optimize\n    await env.DB.prepare('PRAGMA vacuum').run()\n    \n    // Analyze tables for query optimization\n    await env.DB.prepare('PRAGMA analyze').run()\n    \n    console.log('Database optimization completed')\n  } catch (error) {\n    console.error('Failed to optimize database:', error)\n  }\n}\n\nasync function logCleanupJobStart(db: D1Database, jobId: string): Promise<void> {\n  try {\n    const now = new Date().toISOString()\n    await db.prepare(`\n      INSERT INTO monitoring_jobs (id, job_type, status, started_at, created_at)\n      VALUES (?, 'cleanup', 'running', ?, ?)\n    `).bind(jobId, now, now).run()\n  } catch (error) {\n    console.error('Failed to log cleanup job start:', error)\n  }\n}\n\nasync function logCleanupJobComplete(db: D1Database, jobId: string, status: string, errorMessage?: string): Promise<void> {\n  try {\n    const now = new Date().toISOString()\n    await db.prepare(`\n      UPDATE monitoring_jobs\n      SET status = ?, completed_at = ?, error_message = ?\n      WHERE id = ?\n    `).bind(status, now, errorMessage || null, jobId).run()\n  } catch (error) {\n    console.error('Failed to log cleanup job completion:', error)\n  }\n}", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/emilycogsdill/Documents/GitHub/chesscom-helper/worktrees/development/.wrangler/tmp/bundle-HzOvqj/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/emilycogsdill/Documents/GitHub/chesscom-helper/worktrees/development/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/emilycogsdill/Documents/GitHub/chesscom-helper/worktrees/development/.wrangler/tmp/bundle-HzOvqj/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/emilycogsdill/Documents/GitHub/chesscom-helper/worktrees/development/.wrangler/tmp/bundle-HzOvqj/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/emilycogsdill/Documents/GitHub/chesscom-helper/worktrees/development/src/index.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/emilycogsdill/Documents/GitHub/chesscom-helper/worktrees/development/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/emilycogsdill/Documents/GitHub/chesscom-helper/worktrees/development/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/emilycogsdill/Documents/GitHub/chesscom-helper/worktrees/development/src/index.ts\";\n\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "import { cors, error, json, Router } from 'itty-router'\nimport { authRoutes } from './routes/auth'\nimport { userRoutes } from './routes/users'\nimport { monitoringRoutes } from './routes/monitoring'\nimport { notificationRoutes } from './routes/notifications'\nimport { authenticateUser } from './middleware/auth'\nimport { validateRequest } from './middleware/validation'\nimport { rateLimiter } from './middleware/rateLimit'\nimport { errorHandler } from './middleware/errorHandler'\n\nexport interface Env {\n  DB: D1Database\n  CACHE: KVNamespace\n  JWT_SECRET: string\n  CHESS_COM_API_URL: string\n  EMAIL_API_KEY: string\n  RESEND_API_KEY: string\n}\n\nconst { preflight, corsify } = cors({\n  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n  origins: ['*'],\n  headers: ['Authorization', 'Content-Type']\n})\n\nconst router = Router()\n\nrouter\n  .all('*', preflight)\n  .all('*', rateLimiter)\n  .all('*', validateRequest)\n\nrouter.all('/api/v1/auth/*', authRoutes.fetch)\nrouter.all('/api/v1/users/*', authenticateUser, userRoutes.fetch)\nrouter.all('/api/v1/monitoring/*', authenticateUser, monitoringRoutes.fetch)\nrouter.all('/api/v1/notifications/*', authenticateUser, notificationRoutes.fetch)\n\nrouter.get('/health', () => json({ status: 'ok', timestamp: new Date().toISOString() }))\n\nrouter.all('*', () => error(404, 'Not Found'))\n\nexport default {\n  async fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {\n    try {\n      return await router.handle(request, env, ctx).then(corsify)\n    } catch (err) {\n      return errorHandler(err as Error)\n    }\n  },\n\n  async scheduled(event: ScheduledEvent, env: Env, ctx: ExecutionContext): Promise<void> {\n    switch (event.cron) {\n      case '*/5 * * * *':\n        await import('./jobs/playerMonitoring').then(m => m.checkPlayerStatus(env, ctx))\n        break\n      case '0 */6 * * *':\n        await import('./jobs/cleanup').then(m => m.cleanupExpiredTasks(env, ctx))\n        break\n    }\n  }\n}", "import { Router, json, error } from 'itty-router'\nimport { hashPassword, verifyPassword } from '../utils/crypto'\nimport { generateToken } from '../utils/jwt'\nimport { validateEmail, validatePassword } from '../utils/validation'\nimport { createUser, getUserByEmail } from '../services/userService'\nimport type { Env } from '../index'\n\nconst router = Router({ base: '/api/v1/auth' })\n\ninterface RegisterRequest {\n  email: string\n  password: string\n}\n\ninterface LoginRequest {\n  email: string\n  password: string\n}\n\nrouter.post('/register', async (request: Request, env: Env) => {\n  try {\n    const body = await request.json() as RegisterRequest\n\n    if (!validateEmail(body.email)) {\n      return error(400, 'Invalid email format')\n    }\n\n    if (!validatePassword(body.password)) {\n      return error(400, 'Password must be at least 8 characters with uppercase, lowercase, number, and special character')\n    }\n\n    const existingUser = await getUserByEmail(env.DB, body.email)\n    if (existingUser) {\n      return error(400, 'User already exists')\n    }\n\n    const passwordHash = await hashPassword(body.password)\n    const user = await createUser(env.DB, {\n      email: body.email,\n      passwordHash\n    })\n\n    const token = await generateToken(user.id, env.JWT_SECRET)\n\n    return json({\n      userId: user.id,\n      email: user.email,\n      token,\n      createdAt: user.createdAt\n    }, { status: 201 })\n\n  } catch (err) {\n    console.error('Registration error:', err)\n    return error(500, 'Registration failed')\n  }\n})\n\nrouter.post('/login', async (request: Request, env: Env) => {\n  try {\n    const body = await request.json() as LoginRequest\n\n    if (!validateEmail(body.email) || !body.password) {\n      return error(400, 'Invalid email or password')\n    }\n\n    const user = await getUserByEmail(env.DB, body.email)\n    if (!user) {\n      return error(401, 'Invalid credentials')\n    }\n\n    const isValidPassword = await verifyPassword(body.password, user.passwordHash)\n    if (!isValidPassword) {\n      return error(401, 'Invalid credentials')\n    }\n\n    const token = await generateToken(user.id, env.JWT_SECRET)\n\n    return json({\n      token,\n      user: {\n        id: user.id,\n        email: user.email,\n        createdAt: user.createdAt\n      }\n    })\n\n  } catch (err) {\n    console.error('Login error:', err)\n    return error(500, 'Login failed')\n  }\n})\n\nrouter.post('/logout', async (request: Request, env: Env) => {\n  return json({ message: 'Logged out successfully' })\n})\n\nrouter.post('/forgot-password', async (request: Request, env: Env) => {\n  try {\n    const body = await request.json() as { email: string }\n\n    if (!validateEmail(body.email)) {\n      return error(400, 'Invalid email format')\n    }\n\n    const user = await getUserByEmail(env.DB, body.email)\n    if (!user) {\n      return json({ message: 'If an account exists, a reset email will be sent' })\n    }\n\n    // TODO: Implement password reset email logic\n    console.log('Password reset requested for:', body.email)\n\n    return json({ message: 'If an account exists, a reset email will be sent' })\n\n  } catch (err) {\n    console.error('Password reset error:', err)\n    return error(500, 'Password reset failed')\n  }\n})\n\nexport { router as authRoutes }", "interface JWTPayload {\n  userId: string\n  email?: string\n  iat: number\n  exp: number\n}\n\nexport async function generateToken(userId: string, secret: string, expiresIn: number = 86400): Promise<string> {\n  const header = {\n    alg: 'HS256',\n    typ: 'JWT'\n  }\n\n  const payload: JWTPayload = {\n    userId,\n    iat: Math.floor(Date.now() / 1000),\n    exp: Math.floor(Date.now() / 1000) + expiresIn\n  }\n\n  const encodedHeader = base64urlEncode(JSON.stringify(header))\n  const encodedPayload = base64urlEncode(JSON.stringify(payload))\n  \n  const signatureInput = `${encodedHeader}.${encodedPayload}`\n  const signature = await sign(signatureInput, secret)\n  \n  return `${signatureInput}.${signature}`\n}\n\nexport async function verifyToken(token: string, secret: string): Promise<JWTPayload | null> {\n  try {\n    const parts = token.split('.')\n    if (parts.length !== 3) {\n      return null\n    }\n\n    const [encodedHeader, encodedPayload, signature] = parts\n    const signatureInput = `${encodedHeader}.${encodedPayload}`\n    \n    const expectedSignature = await sign(signatureInput, secret)\n    if (signature !== expectedSignature) {\n      return null\n    }\n\n    const payload = JSON.parse(base64urlDecode(encodedPayload)) as JWTPayload\n    \n    if (payload.exp < Math.floor(Date.now() / 1000)) {\n      return null\n    }\n\n    return payload\n  } catch (error) {\n    console.error('JWT verification error:', error)\n    return null\n  }\n}\n\nasync function sign(data: string, secret: string): Promise<string> {\n  const encoder = new TextEncoder()\n  const key = await crypto.subtle.importKey(\n    'raw',\n    encoder.encode(secret),\n    { name: 'HMAC', hash: 'SHA-256' },\n    false,\n    ['sign']\n  )\n\n  const signature = await crypto.subtle.sign('HMAC', key, encoder.encode(data))\n  return base64urlEncode(new Uint8Array(signature))\n}\n\nfunction base64urlEncode(data: string | Uint8Array): string {\n  let str: string\n  if (typeof data === 'string') {\n    str = btoa(unescape(encodeURIComponent(data)))\n  } else {\n    str = btoa(String.fromCharCode(...data))\n  }\n  return str.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '')\n}\n\nfunction base64urlDecode(str: string): string {\n  str = str.replace(/-/g, '+').replace(/_/g, '/')\n  while (str.length % 4) {\n    str += '='\n  }\n  return decodeURIComponent(escape(atob(str)))\n}", "export function validateEmail(email: string): boolean {\n  if (!email || typeof email !== 'string') return false\n  \n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n  return emailRegex.test(email) && email.length <= 254\n}\n\nexport function validatePassword(password: string): boolean {\n  if (!password || typeof password !== 'string') return false\n  \n  if (password.length < 8 || password.length > 128) return false\n  \n  const hasUppercase = /[A-Z]/.test(password)\n  const hasLowercase = /[a-z]/.test(password)\n  const hasNumber = /\\d/.test(password)\n  const hasSpecialChar = /[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/.test(password)\n  \n  return hasUppercase && hasLowercase && hasNumber && hasSpecialChar\n}\n\nexport function validateChessComUsername(username: string): boolean {\n  if (!username || typeof username !== 'string') return false\n  \n  if (username.length < 3 || username.length > 25) return false\n  \n  const usernameRegex = /^[a-zA-Z0-9_-]+$/\n  return usernameRegex.test(username)\n}\n\nexport function sanitizeInput(input: string): string {\n  if (!input || typeof input !== 'string') return ''\n  \n  return input\n    .trim()\n    .replace(/[<>&\"']/g, (char) => {\n      const entities: Record<string, string> = {\n        '<': '&lt;',\n        '>': '&gt;',\n        '&': '&amp;',\n        '\"': '&quot;',\n        \"'\": '&#x27;'\n      }\n      return entities[char] || char\n    })\n}\n\nexport function validateUUID(uuid: string): boolean {\n  if (!uuid || typeof uuid !== 'string') return false\n  \n  const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i\n  return uuidRegex.test(uuid)\n}\n\nexport function validateNotificationFrequency(frequency: string): boolean {\n  const validFrequencies = ['immediate', 'digest', 'disabled']\n  return validFrequencies.includes(frequency)\n}", "import { Router, json, error } from 'itty-router'\nimport { getUserById, updateUser, deleteUser } from '../services/userService'\nimport { getPlayerSubscriptions, createPlayerSubscription, deletePlayerSubscription } from '../services/subscriptionService'\nimport { getUserPreferences, updateUserPreferences } from '../services/preferencesService'\nimport { validateChessComUsername } from '../utils/validation'\nimport { verifyPlayerExists } from '../services/chessComService'\nimport type { Env } from '../index'\n\nconst router = Router({ base: '/api/v1/users' })\n\nrouter.get('/me', async (request: Request, env: Env) => {\n  try {\n    const userId = request.user?.id\n    if (!userId) {\n      return error(401, 'Unauthorized')\n    }\n\n    const user = await getUserById(env.DB, userId)\n    if (!user) {\n      return error(404, 'User not found')\n    }\n\n    return json({\n      id: user.id,\n      email: user.email,\n      createdAt: user.createdAt,\n      updatedAt: user.updatedAt\n    })\n\n  } catch (err) {\n    console.error('Get user error:', err)\n    return error(500, 'Failed to fetch user')\n  }\n})\n\nrouter.put('/me', async (request: Request, env: Env) => {\n  try {\n    const userId = request.user?.id\n    if (!userId) {\n      return error(401, 'Unauthorized')\n    }\n\n    const body = await request.json()\n    const updatedUser = await updateUser(env.DB, userId, body)\n\n    return json({\n      id: updatedUser.id,\n      email: updatedUser.email,\n      updatedAt: updatedUser.updatedAt\n    })\n\n  } catch (err) {\n    console.error('Update user error:', err)\n    return error(500, 'Failed to update user')\n  }\n})\n\nrouter.delete('/me', async (request: Request, env: Env) => {\n  try {\n    const userId = request.user?.id\n    if (!userId) {\n      return error(401, 'Unauthorized')\n    }\n\n    await deleteUser(env.DB, userId)\n    return json({ message: 'Account deleted successfully' })\n\n  } catch (err) {\n    console.error('Delete user error:', err)\n    return error(500, 'Failed to delete account')\n  }\n})\n\nrouter.get('/me/subscriptions', async (request: Request, env: Env) => {\n  try {\n    const userId = request.user?.id\n    if (!userId) {\n      return error(401, 'Unauthorized')\n    }\n\n    const subscriptions = await getPlayerSubscriptions(env.DB, userId)\n    return json({ subscriptions })\n\n  } catch (err) {\n    console.error('Get subscriptions error:', err)\n    return error(500, 'Failed to fetch subscriptions')\n  }\n})\n\nrouter.post('/me/subscriptions', async (request: Request, env: Env) => {\n  try {\n    const userId = request.user?.id\n    if (!userId) {\n      return error(401, 'Unauthorized')\n    }\n\n    const body = await request.json() as { chessComUsername: string }\n\n    if (!validateChessComUsername(body.chessComUsername)) {\n      return error(400, 'Invalid Chess.com username')\n    }\n\n    const playerExists = await verifyPlayerExists(body.chessComUsername, env.CHESS_COM_API_URL)\n    if (!playerExists) {\n      return error(404, 'Chess.com player not found')\n    }\n\n    const subscription = await createPlayerSubscription(env.DB, {\n      userId,\n      chessComUsername: body.chessComUsername\n    })\n\n    return json({\n      id: subscription.id,\n      chessComUsername: subscription.chessComUsername,\n      createdAt: subscription.createdAt\n    }, { status: 201 })\n\n  } catch (err) {\n    console.error('Create subscription error:', err)\n    return error(500, 'Failed to create subscription')\n  }\n})\n\nrouter.delete('/me/subscriptions', async (request: Request, env: Env) => {\n  try {\n    const userId = request.user?.id\n    if (!userId) {\n      return error(401, 'Unauthorized')\n    }\n\n    const body = await request.json() as { chessComUsername: string }\n\n    if (!validateChessComUsername(body.chessComUsername)) {\n      return error(400, 'Invalid Chess.com username')\n    }\n\n    await deletePlayerSubscription(env.DB, userId, body.chessComUsername)\n    return json({ message: 'Subscription removed successfully' })\n\n  } catch (err) {\n    console.error('Delete subscription error:', err)\n    return error(500, 'Failed to remove subscription')\n  }\n})\n\nrouter.get('/me/preferences', async (request: Request, env: Env) => {\n  try {\n    const userId = request.user?.id\n    if (!userId) {\n      return error(401, 'Unauthorized')\n    }\n\n    const preferences = await getUserPreferences(env.DB, userId)\n    return json({ preferences })\n\n  } catch (err) {\n    console.error('Get preferences error:', err)\n    return error(500, 'Failed to fetch preferences')\n  }\n})\n\nrouter.put('/me/preferences', async (request: Request, env: Env) => {\n  try {\n    const userId = request.user?.id\n    if (!userId) {\n      return error(401, 'Unauthorized')\n    }\n\n    const body = await request.json()\n    const preferences = await updateUserPreferences(env.DB, userId, body)\n\n    return json({ preferences })\n\n  } catch (err) {\n    console.error('Update preferences error:', err)\n    return error(500, 'Failed to update preferences')\n  }\n})\n\nexport { router as userRoutes }", "import { createApiError } from '../middleware/errorHandler'\nimport { validateNotificationFrequency } from '../utils/validation'\n\nexport interface UserPreferences {\n  userId: string\n  emailNotifications: boolean\n  notificationFrequency: 'immediate' | 'digest' | 'disabled'\n  createdAt: string\n  updatedAt: string\n}\n\nexport interface UpdatePreferencesData {\n  emailNotifications?: boolean\n  notificationFrequency?: 'immediate' | 'digest' | 'disabled'\n}\n\nexport async function getUserPreferences(db: D1Database, userId: string): Promise<UserPreferences> {\n  try {\n    let result = await db.prepare(`\n      SELECT user_id, email_notifications, notification_frequency, created_at, updated_at\n      FROM user_preferences\n      WHERE user_id = ?\n    `).bind(userId).first()\n\n    if (!result) {\n      result = await createDefaultUserPreferences(db, userId)\n    }\n\n    return {\n      userId: result.user_id as string,\n      emailNotifications: Boolean(result.email_notifications),\n      notificationFrequency: result.notification_frequency as 'immediate' | 'digest' | 'disabled',\n      createdAt: result.created_at as string,\n      updatedAt: result.updated_at as string\n    }\n  } catch (error) {\n    console.error('Get user preferences error:', error)\n    throw createApiError('Failed to fetch user preferences', 500, 'PREFERENCES_FETCH_FAILED', error)\n  }\n}\n\nexport async function updateUserPreferences(db: D1Database, userId: string, updateData: UpdatePreferencesData): Promise<UserPreferences> {\n  const now = new Date().toISOString()\n  const updates: string[] = []\n  const values: any[] = []\n\n  if (updateData.emailNotifications !== undefined) {\n    updates.push('email_notifications = ?')\n    values.push(updateData.emailNotifications)\n  }\n\n  if (updateData.notificationFrequency) {\n    if (!validateNotificationFrequency(updateData.notificationFrequency)) {\n      throw createApiError('Invalid notification frequency', 400, 'INVALID_NOTIFICATION_FREQUENCY')\n    }\n    updates.push('notification_frequency = ?')\n    values.push(updateData.notificationFrequency)\n  }\n\n  if (updates.length === 0) {\n    throw createApiError('No valid fields to update', 400, 'INVALID_UPDATE_DATA')\n  }\n\n  updates.push('updated_at = ?')\n  values.push(now, userId)\n\n  try {\n    await db.prepare(`\n      INSERT INTO user_preferences (user_id, email_notifications, notification_frequency, created_at, updated_at)\n      VALUES (?, true, 'immediate', ?, ?)\n      ON CONFLICT(user_id) DO UPDATE SET ${updates.join(', ')}\n      WHERE user_id = ?\n    `).bind(userId, now, now, ...values).run()\n\n    return await getUserPreferences(db, userId)\n  } catch (error) {\n    console.error('Update user preferences error:', error)\n    throw createApiError('Failed to update user preferences', 500, 'PREFERENCES_UPDATE_FAILED', error)\n  }\n}\n\nasync function createDefaultUserPreferences(db: D1Database, userId: string): Promise<any> {\n  const now = new Date().toISOString()\n\n  try {\n    await db.prepare(`\n      INSERT INTO user_preferences (user_id, email_notifications, notification_frequency, created_at, updated_at)\n      VALUES (?, true, 'immediate', ?, ?)\n    `).bind(userId, now, now).run()\n\n    return {\n      user_id: userId,\n      email_notifications: true,\n      notification_frequency: 'immediate',\n      created_at: now,\n      updated_at: now\n    }\n  } catch (error) {\n    console.error('Create default preferences error:', error)\n    throw createApiError('Failed to create default preferences', 500, 'PREFERENCES_CREATION_FAILED', error)\n  }\n}", "import { Router, json, error } from 'itty-router'\nimport { getPlayerStatus, getMonitoringStatus } from '../services/monitoringService'\nimport { validateChessComUsername } from '../utils/validation'\nimport type { Env } from '../index'\n\nconst router = Router({ base: '/api/v1/monitoring' })\n\nrouter.get('/status', async (request: Request, env: Env) => {\n  try {\n    const userId = request.user?.id\n    if (!userId) {\n      return error(401, 'Unauthorized')\n    }\n\n    const status = await getMonitoringStatus(env.DB)\n    return json(status)\n\n  } catch (err) {\n    console.error('Get monitoring status error:', err)\n    return error(500, 'Failed to fetch monitoring status')\n  }\n})\n\nrouter.get('/players/:username', async (request: Request, env: Env) => {\n  try {\n    const userId = request.user?.id\n    if (!userId) {\n      return error(401, 'Unauthorized')\n    }\n\n    const username = request.params?.username\n    if (!username || !validateChessComUsername(username)) {\n      return error(400, 'Invalid Chess.com username')\n    }\n\n    const playerStatus = await getPlayerStatus(env.DB, username)\n    if (!playerStatus) {\n      return error(404, 'Player not found in monitoring system')\n    }\n\n    return json({\n      username: playerStatus.chessComUsername,\n      isOnline: playerStatus.isOnline,\n      isPlaying: playerStatus.isPlaying,\n      currentGameUrl: playerStatus.currentGameUrl,\n      lastSeen: playerStatus.lastSeen,\n      lastChecked: playerStatus.lastChecked\n    })\n\n  } catch (err) {\n    console.error('Get player status error:', err)\n    return error(500, 'Failed to fetch player status')\n  }\n})\n\nrouter.post('/internal/check', async (request: Request, env: Env) => {\n  try {\n    const body = await request.json() as { playernames?: string[] }\n    \n    if (body.playernames && !Array.isArray(body.playernames)) {\n      return error(400, 'Playernames must be an array')\n    }\n\n    const checkResult = await import('../jobs/playerMonitoring').then(m => \n      m.checkSpecificPlayers(env, body.playernames)\n    )\n\n    return json({\n      message: 'Player check initiated',\n      playersChecked: checkResult.playersChecked,\n      timestamp: new Date().toISOString()\n    })\n\n  } catch (err) {\n    console.error('Manual player check error:', err)\n    return error(500, 'Failed to initiate player check')\n  }\n})\n\nrouter.post('/internal/poll', async (request: Request, env: Env) => {\n  try {\n    const pollResult = await import('../jobs/playerMonitoring').then(m => \n      m.checkPlayerStatus(env, null as any)\n    )\n\n    return json({\n      message: 'Polling completed',\n      playersChecked: pollResult.playersChecked,\n      notificationsSent: pollResult.notificationsSent,\n      timestamp: new Date().toISOString()\n    })\n\n  } catch (err) {\n    console.error('Manual polling error:', err)\n    return error(500, 'Failed to complete polling')\n  }\n})\n\nexport { router as monitoringRoutes }", "import { Router, json, error } from 'itty-router'\nimport { getNotificationPreferences, updateNotificationPreferences } from '../services/notificationService'\nimport { getNotificationHistory } from '../services/notificationService'\nimport type { Env } from '../index'\n\nconst router = Router({ base: '/api/v1/notifications' })\n\nrouter.get('/preferences', async (request: Request, env: Env) => {\n  try {\n    const userId = request.user?.id\n    if (!userId) {\n      return error(401, 'Unauthorized')\n    }\n\n    const preferences = await getNotificationPreferences(env.DB, userId)\n    return json({ preferences })\n\n  } catch (err) {\n    console.error('Get notification preferences error:', err)\n    return error(500, 'Failed to fetch notification preferences')\n  }\n})\n\nrouter.put('/preferences', async (request: Request, env: Env) => {\n  try {\n    const userId = request.user?.id\n    if (!userId) {\n      return error(401, 'Unauthorized')\n    }\n\n    const body = await request.json() as {\n      emailNotifications?: boolean\n      notificationFrequency?: 'immediate' | 'digest' | 'disabled'\n    }\n\n    const preferences = await updateNotificationPreferences(env.DB, userId, body)\n    return json({ preferences })\n\n  } catch (err) {\n    console.error('Update notification preferences error:', err)\n    return error(500, 'Failed to update notification preferences')\n  }\n})\n\nrouter.get('/history', async (request: Request, env: Env) => {\n  try {\n    const userId = request.user?.id\n    if (!userId) {\n      return error(401, 'Unauthorized')\n    }\n\n    const url = new URL(request.url)\n    const limit = Math.min(parseInt(url.searchParams.get('limit') || '50'), 100)\n    const offset = parseInt(url.searchParams.get('offset') || '0')\n\n    const history = await getNotificationHistory(env.DB, userId, { limit, offset })\n    return json({ \n      notifications: history,\n      pagination: {\n        limit,\n        offset,\n        hasMore: history.length === limit\n      }\n    })\n\n  } catch (err) {\n    console.error('Get notification history error:', err)\n    return error(500, 'Failed to fetch notification history')\n  }\n})\n\nrouter.post('/internal/send', async (request: Request, env: Env) => {\n  try {\n    const body = await request.json() as {\n      userId: string\n      type: 'game_started' | 'game_ended'\n      data: {\n        playerName: string\n        gameUrl?: string\n        result?: string\n      }\n    }\n\n    if (!body.userId || !body.type || !body.data?.playerName) {\n      return error(400, 'Missing required fields')\n    }\n\n    const sendResult = await import('../services/emailService').then(m =>\n      m.sendNotificationEmail(env, body.userId, body.type, body.data)\n    )\n\n    return json({\n      message: 'Notification sent',\n      notificationId: sendResult.notificationId,\n      delivered: sendResult.delivered,\n      timestamp: new Date().toISOString()\n    })\n\n  } catch (err) {\n    console.error('Send notification error:', err)\n    return error(500, 'Failed to send notification')\n  }\n})\n\nrouter.post('/internal/queue', async (request: Request, env: Env) => {\n  try {\n    const body = await request.json() as {\n      userId: string\n      playerName: string\n      eventType: 'game_started' | 'game_ended'\n      gameUrl?: string\n      result?: string\n    }\n\n    if (!body.userId || !body.playerName || !body.eventType) {\n      return error(400, 'Missing required fields')\n    }\n\n    const queueResult = await import('../services/notificationService').then(m =>\n      m.queueNotification(env.DB, body)\n    )\n\n    return json({\n      message: 'Notification queued',\n      queueId: queueResult.id,\n      timestamp: new Date().toISOString()\n    })\n\n  } catch (err) {\n    console.error('Queue notification error:', err)\n    return error(500, 'Failed to queue notification')\n  }\n})\n\nexport { router as notificationRoutes }", "import { error } from 'itty-router'\nimport { verifyToken } from '../utils/jwt'\nimport type { Env } from '../index'\n\ndeclare global {\n  namespace globalThis {\n    interface Request {\n      user?: {\n        id: string\n        email: string\n      }\n    }\n  }\n}\n\nexport async function authenticateUser(request: Request, env: Env): Promise<Response | void> {\n  const authHeader = request.headers.get('Authorization')\n  \n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\n    return error(401, 'Missing or invalid authorization header')\n  }\n\n  const token = authHeader.substring(7)\n  \n  try {\n    const payload = await verifyToken(token, env.JWT_SECRET)\n    \n    if (!payload || !payload.userId) {\n      return error(401, 'Invalid token')\n    }\n\n    request.user = {\n      id: payload.userId,\n      email: payload.email || ''\n    }\n\n  } catch (err) {\n    console.error('Token verification error:', err)\n    return error(401, 'Invalid or expired token')\n  }\n}", "import { error } from 'itty-router'\nimport type { Env } from '../index'\n\nconst MAX_BODY_SIZE = 1024 * 1024 // 1MB\nconst REQUIRED_HEADERS = ['content-type']\n\nexport async function validateRequest(request: Request, env: Env): Promise<Response | void> {\n  if (request.method === 'OPTIONS') {\n    return\n  }\n\n  if (['POST', 'PUT', 'PATCH'].includes(request.method)) {\n    const contentType = request.headers.get('content-type')\n    \n    if (!contentType) {\n      return error(400, 'Content-Type header is required')\n    }\n\n    if (!contentType.includes('application/json')) {\n      return error(400, 'Content-Type must be application/json')\n    }\n\n    const contentLength = request.headers.get('content-length')\n    if (contentLength && parseInt(contentLength) > MAX_BODY_SIZE) {\n      return error(413, 'Request body too large')\n    }\n\n    try {\n      const clonedRequest = request.clone()\n      const body = await clonedRequest.text()\n      \n      if (body.length > MAX_BODY_SIZE) {\n        return error(413, 'Request body too large')\n      }\n\n      if (body.trim()) {\n        JSON.parse(body)\n      }\n    } catch (err) {\n      return error(400, 'Invalid JSON in request body')\n    }\n  }\n\n  const userAgent = request.headers.get('user-agent')\n  if (!userAgent) {\n    return error(400, 'User-Agent header is required')\n  }\n\n  if (userAgent.length > 500) {\n    return error(400, 'User-Agent header too long')\n  }\n}", "import { error } from 'itty-router'\nimport type { Env } from '../index'\n\nconst RATE_LIMITS = {\n  default: { requests: 100, window: 3600 }, // 100 requests per hour\n  auth: { requests: 10, window: 900 },     // 10 requests per 15 minutes\n  api: { requests: 1000, window: 3600 }    // 1000 requests per hour for authenticated users\n}\n\nexport async function rateLimiter(request: Request, env: Env): Promise<Response | void> {\n  if (request.method === 'OPTIONS') {\n    return\n  }\n\n  const clientId = getClientId(request)\n  const endpoint = getEndpointType(request.url)\n  const limit = RATE_LIMITS[endpoint] || RATE_LIMITS.default\n\n  const key = `rate_limit:${endpoint}:${clientId}`\n  const now = Math.floor(Date.now() / 1000)\n  const windowStart = now - limit.window\n\n  try {\n    const current = await env.CACHE.get(key)\n    let requests: number[] = current ? JSON.parse(current) : []\n\n    requests = requests.filter(timestamp => timestamp > windowStart)\n\n    if (requests.length >= limit.requests) {\n      const resetTime = requests[0] + limit.window\n      return error(429, 'Rate limit exceeded', {\n        headers: {\n          'Retry-After': String(resetTime - now),\n          'X-RateLimit-Limit': String(limit.requests),\n          'X-RateLimit-Remaining': '0',\n          'X-RateLimit-Reset': String(resetTime)\n        }\n      })\n    }\n\n    requests.push(now)\n    await env.CACHE.put(key, JSON.stringify(requests), { expirationTtl: limit.window })\n\n    const remaining = limit.requests - requests.length\n    const resetTime = requests[0] + limit.window\n\n    request.headers.set('X-RateLimit-Limit', String(limit.requests))\n    request.headers.set('X-RateLimit-Remaining', String(remaining))\n    request.headers.set('X-RateLimit-Reset', String(resetTime))\n\n  } catch (err) {\n    console.error('Rate limiting error:', err)\n  }\n}\n\nfunction getClientId(request: Request): string {\n  const forwarded = request.headers.get('CF-Connecting-IP') ||\n                   request.headers.get('X-Forwarded-For') ||\n                   request.headers.get('X-Real-IP')\n  \n  if (forwarded) {\n    return forwarded.split(',')[0].trim()\n  }\n\n  const authHeader = request.headers.get('Authorization')\n  if (authHeader?.startsWith('Bearer ')) {\n    return `user:${authHeader.substring(7, 20)}`\n  }\n\n  return 'anonymous'\n}\n\nfunction getEndpointType(url: string): keyof typeof RATE_LIMITS {\n  if (url.includes('/auth/')) return 'auth'\n  if (url.includes('/api/')) return 'api'\n  return 'default'\n}", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n"],
  "mappings": "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",
  "names": ["Router", "createResponse", "json", "getMessage", "error", "text", "html", "jpeg", "png", "webp", "cors", "base", "routes", "other", "__proto__", "Proxy", "get", "target", "prop", "receiver", "path", "route", "handlers", "push", "toUpperCase", "RegExp", "replace", "async", "request", "args", "response", "match", "url", "URL", "query", "k", "v", "searchParams", "concat", "t", "handler", "before", "proxy", "outer", "method", "regex", "pathname", "params", "groups", "err", "catch", "finally", "format", "transform", "body", "options", "Response", "headers", "set", "JSON", "stringify", "code", "a", "b", "Error", "message", "status", "String", "origin", "credentials", "allowMethods", "allowHeaders", "exposeHeaders", "maxAge", "getAccessControlOrigin", "requestOrigin", "test", "Array", "isArray", "includes", "Function", "appendHeadersAndReturn", "key", "value", "Object", "entries", "append", "corsify", "clone", "preflight", "join", "router", "router", "router", "resetTime", "router"]
}
